1. Si quieres correr tu cluster de pruebas con kind:

cat <<EOF >> kind-configuration.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
containerdConfigPatches:
- |
  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:5000"]
    endpoint = ["http://kind-registry:5000"]
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true"
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    protocol: TCP
  - containerPort: 443
    hostPort: 443
    protocol: TCP
- role: worker
- role: worker 
- role: worker
EOF

2. Ejecutar la creacion de tu cluster  

kind create cluster \
--name k8s-multinode \
--image kindest/node:v1.16.9 \
--config=kind-configuration.yaml


3. Agregamos ingress-controller

kubectl apply -f \
  https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/kind/deploy.yaml

Para probar ejecutar un curl a localhost:

curl http://localhost
Nota: Como no hay ninguna aplicacion el curl respondera default backend 404


4. Crear un docker registry en local

docker run -d --restart=unless-stopped -p "5000:5000" --name "kind-registry" registry:2

Verifica que tu registry se esta ejecutando perfectamente
docker ps --filter "name=kind-registry"

output

CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
84ab536f99d9        registry:2          "/entrypoint.sh /etcâ€¦"   14 hours ago        Up 14 hours         0.0.0.0:5000->5000/tcp   kind-registry


5. Conecta el registry a la red de docker

docker network connect "kind" "kind-registry"

6. Lista los nodos de tu cluster construido con kind

kind get nodes --name k8s-multinode

7. Si quieres jugar con metricas de pods y nodes para hacer ejercicios de auto-scalado tienes que agregar tu metrics-server, este sirve para recoger 
las metricas de los recursos del cluster, para ello ejecuta:

kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.6/components.yaml

*Esta es la instalacion por defecto, ahora debes hacer un patch para transmitir metricas sin el soporte tls. Ejecuta:

kubectl patch deployment metrics-server -n kube-system -p '{"spec":{"template":{"spec":{"containers":[{"name":"metrics-server","args":["--cert-dir=/tmp", "--secure-port=4443","--v=2", "--kubelet-insecure-tls","--kubelet-preferred-address-types=InternalIP"]}]}}}}'

*Al ejecutar:

kubectl get pods -n kube-system

*apreciaras un nuevo pods con el nombre de metrics-server:

metrics-server-6857c6489-4rwjg                                  1/1     Running   0          4m46s

*Observamos los logs : kubectl -n kubesystem log metric-servers

Despues de unos minutos apreciaras el Scraping de las metricas

I0508 06:29:09.440261       1 manager.go:95] Scraping metrics from 1 sources
I0508 06:29:09.447551       1 manager.go:120] Querying source: kubelet_summary:gc-hcmc-kubernetes-demo-control-plane
I0508 06:29:09.475379       1 manager.go:148] ScrapeMetrics: time: 35.062035ms, nodes: 1, pods: 11
I0508 06:30:09.441514       1 manager.go:95] Scraping metrics from 1 sources
I0508 06:30:09.445296       1 manager.go:120] Querying source: kubelet_summary:gc-hcmc-kubernetes-demo-control-plane
I0508 06:30:09.492869       1 manager.go:148] ScrapeMetrics: time: 51.275712ms, nodes: 1, pods: 11
I0508 06:31:09.441779       1 manager.go:95] Scraping metrics from 1 sources
I0508 06:31:09.443356       1 manager.go:120] Querying source: kubelet_summary:gc-hcmc-kubernetes-demo-control-plane
I0508 06:31:09.477605       1 manager.go:148] ScrapeMetrics: time: 35.686828ms, nodes: 1, pods: 11
I0508 06:32:09.441196       1 manager.go:95] Scraping metrics from 1 sources
I0508 06:32:09.447803       1 manager.go:120] Querying source: kubelet_summary:gc-hcmc-kubernetes-demo-control-plane
I0508 06:32:09.484723       1 manager.go:148] ScrapeMetrics: time: 43.40121ms, nodes: 1, pods: 11

*Ejecutando :kubectl top nodes
Aprecias los recursos de tu cluster de kind de kubernetes

NAME                                    CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%
gc-hcmc-kubernetes-demo-control-plane   192m         4%     793Mi           39%

Y lo mismo pero para los pods: kubectl top pods

NAME   CPU(cores)   MEMORY(bytes)
app    1m           11Mi



